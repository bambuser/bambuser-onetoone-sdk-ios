// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BambuserLiveShoppingOnetoOne
import AVFoundation
@_exported import BambuserLiveShoppingOnetoOne
import Combine
import Foundation
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
@objc @_Concurrency.MainActor(unsafe) public class LiveShoppingAgentView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var frame: CoreGraphics.CGRect {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var transform: CoreGraphics.CGAffineTransform {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isMinimized: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var minimizedOrigin: BambuserLiveShoppingOnetoOne.MinimizedOrigin
  @_Concurrency.MainActor(unsafe) public var minimizedSize: CoreGraphics.CGSize? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimizedSuperview: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) final public let region: BambuserLiveShoppingOnetoOne.Region
  @_Concurrency.MainActor(unsafe) final public let organisationId: Swift.String
  @_Concurrency.MainActor(unsafe) public var connectId: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var error: Swift.Error? {
    get
  }
  public typealias EventHandler = (BambuserLiveShoppingOnetoOne.AgentEvent) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public var eventHandler: BambuserLiveShoppingOnetoOne.LiveShoppingAgentView.EventHandler?
  @_Concurrency.MainActor(unsafe) public var isLoaded: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var tapToMaximize: Swift.Bool
  @_Concurrency.MainActor(unsafe) public init(region: BambuserLiveShoppingOnetoOne.Region, organisationId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func loadBooking(connectId: Swift.String)
  @_Concurrency.MainActor(unsafe) public func maximizeView()
  @objc deinit
}
extension BambuserLiveShoppingOnetoOne.LiveShoppingAgentView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
}
extension BambuserLiveShoppingOnetoOne.LiveShoppingAgentView : WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, requestMediaCapturePermissionFor origin: WebKit.WKSecurityOrigin, initiatedByFrame frame: WebKit.WKFrameInfo, type: WebKit.WKMediaCaptureType, decisionHandler: @escaping (WebKit.WKPermissionDecision) -> Swift.Void)
}
extension BambuserLiveShoppingOnetoOne.LiveShoppingAgentView : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
public struct BringAgentToFrontModifier : SwiftUI.ViewModifier {
  public init()
  @_Concurrency.MainActor(unsafe) public func body(content: BambuserLiveShoppingOnetoOne.BringAgentToFrontModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s28BambuserLiveShoppingOnetoOne25BringAgentToFrontModifierV4body7contentQr7SwiftUI05_ViewJ8_ContentVyACG_tF", 0) __
}
extension SwiftUI.View {
  public func bringAgentToFront() -> some SwiftUI.View
  
}
@_hasMissingDesignatedInitializers public class LiveShoppingAgentContext : Combine.ObservableObject {
  public static let shared: BambuserLiveShoppingOnetoOne.LiveShoppingAgentContext
  @Combine.Published @_projectedValueProperty($isMinimized) public var isMinimized: Swift.Bool {
    get
  }
  public var $isMinimized: Combine.Published<Swift.Bool>.Publisher {
    get
  }
  public var agent: BambuserLiveShoppingOnetoOne.LiveShoppingAgent? {
    get
  }
  public var agentView: BambuserLiveShoppingOnetoOne.LiveShoppingAgentView? {
    get
  }
  public func maximizeAgent()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct MinimizedStateRestoreModifier : SwiftUI.ViewModifier {
  public init(restoreAction: @escaping BambuserLiveShoppingOnetoOne.MinimizedStateRestoreModifier.RestoreAction)
  public typealias RestoreAction = (BambuserLiveShoppingOnetoOne.LiveShoppingAgent) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public func body(content: BambuserLiveShoppingOnetoOne.MinimizedStateRestoreModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s28BambuserLiveShoppingOnetoOne29MinimizedStateRestoreModifierV4body7contentQr7SwiftUI05_ViewI8_ContentVyACG_tF", 0) __
}
public struct MinimizedStateResetRestoreModifier : SwiftUI.ViewModifier {
  public init()
  @_Concurrency.MainActor(unsafe) public func body(content: BambuserLiveShoppingOnetoOne.MinimizedStateResetRestoreModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s28BambuserLiveShoppingOnetoOne34MinimizedStateResetRestoreModifierV4body7contentQr7SwiftUI05_ViewJ8_ContentVyACG_tF", 0) __
}
extension SwiftUI.View {
  public func restoreAgentAction(action: @escaping BambuserLiveShoppingOnetoOne.MinimizedStateRestoreModifier.RestoreAction) -> some SwiftUI.View
  
  public func resetAgentRestoreAction() -> some SwiftUI.View
  
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public var sceneKeyWindow: UIKit.UIWindow? {
    get
  }
}
public enum AgentEvent : Swift.Codable, Swift.Equatable {
  case unknown
  case error
  case didLoad
  case willMinimize
  case didMinimize
  case willMaximize
  case didMaximize
  public static func == (a: BambuserLiveShoppingOnetoOne.AgentEvent, b: BambuserLiveShoppingOnetoOne.AgentEvent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct LiveShoppingAgent : SwiftUI.View {
  public init(region: BambuserLiveShoppingOnetoOne.Region, organisationId: Swift.String, connectId: Swift.String)
  public init(agentView: BambuserLiveShoppingOnetoOne.LiveShoppingAgentView)
  public let region: BambuserLiveShoppingOnetoOne.Region
  public let organisationId: Swift.String
  public let connectId: Swift.String
  public var minimizedOrigin: BambuserLiveShoppingOnetoOne.MinimizedOrigin {
    get
    set
  }
  public var minimizedSize: CoreGraphics.CGSize? {
    get
    set
  }
  public var minimizedSuperview: UIKit.UIView? {
    get
    set
  }
  public var tapToMaximize: Swift.Bool {
    get
    set
  }
  public let context: BambuserLiveShoppingOnetoOne.LiveShoppingAgentContext
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s28BambuserLiveShoppingOnetoOne0bC5AgentV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers final public class MinimizedState {
  public static let shared: BambuserLiveShoppingOnetoOne.MinimizedState
  final public var agentView: BambuserLiveShoppingOnetoOne.LiveShoppingAgentView? {
    get
  }
  public typealias RestoreAction = (BambuserLiveShoppingOnetoOne.LiveShoppingAgentView) -> Swift.Void
  final public func registerRestoreAction(_ action: @escaping BambuserLiveShoppingOnetoOne.MinimizedState.RestoreAction)
  final public var isMinimized: Swift.Bool {
    get
  }
  final public func resetRestoreAction()
  final public func bringToFront()
  final public func moveTo(view: UIKit.UIView)
  final public func maximize()
  final public func remove()
  @objc deinit
}
public enum MinimizedOrigin {
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  case custom(_: CoreGraphics.CGPoint)
}
public enum Region : Swift.Equatable {
  case eu
  case global
  case custom(url: Swift.String)
  public static func == (a: BambuserLiveShoppingOnetoOne.Region, b: BambuserLiveShoppingOnetoOne.Region) -> Swift.Bool
}
extension BambuserLiveShoppingOnetoOne.AgentEvent : Swift.Hashable {}
