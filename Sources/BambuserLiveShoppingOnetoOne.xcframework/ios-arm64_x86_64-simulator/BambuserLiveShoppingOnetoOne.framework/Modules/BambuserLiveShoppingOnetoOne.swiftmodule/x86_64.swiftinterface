// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios14.3-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BambuserLiveShoppingOnetoOne
import AVFoundation
@_exported import BambuserLiveShoppingOnetoOne
import Combine
import Foundation
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
public enum CallSessionStatus : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Equatable {
  case starting
  case ready
  case waiting
  case connecting
  case running
  case reconnecting
  case disconnecting
  case disconnected
  case paused
  case waitingButLostRemote
  case forwarding
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BambuserLiveShoppingOnetoOne.CallSessionStatus]
  public typealias RawValue = Swift.String
  public static var allCases: [BambuserLiveShoppingOnetoOne.CallSessionStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct AttributeDefinition : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let name: Swift.String?
  public var significant: Swift.Bool? {
    get
  }
  public let options: [BambuserLiveShoppingOnetoOne.AttributeDefinitionOption]
  public init(id: Swift.String, name: Swift.String? = nil, options: [BambuserLiveShoppingOnetoOne.AttributeDefinitionOption]) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: BambuserLiveShoppingOnetoOne.AttributeDefinition, b: BambuserLiveShoppingOnetoOne.AttributeDefinition) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Rating : Swift.Codable, Swift.Equatable {
  public let rating: Swift.Float
  public let maxValue: Swift.Int
  public let numberOfRatings: Swift.Int?
  public init(rating: Swift.Float, maxValue: Swift.Int, numberOfRatings: Swift.Int? = nil)
  public static func == (a: BambuserLiveShoppingOnetoOne.Rating, b: BambuserLiveShoppingOnetoOne.Rating) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_Concurrency.MainActor(unsafe) public class LiveShoppingAgentView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var frame: CoreGraphics.CGRect {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var transform: CoreGraphics.CGAffineTransform {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isMinimized: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var minimizedOrigin: BambuserLiveShoppingOnetoOne.MinimizedOrigin
  @_Concurrency.MainActor(unsafe) public var minimizedSize: CoreGraphics.CGSize? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimizedSuperview: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) final public let region: BambuserLiveShoppingOnetoOne.Region
  @_Concurrency.MainActor(unsafe) final public let organisationId: Swift.String
  @_Concurrency.MainActor(unsafe) final public let enableSSO: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var connectId: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var callSessionStatus: BambuserLiveShoppingOnetoOne.CallSessionStatus {
    get
  }
  @_Concurrency.MainActor(unsafe) public var clientLocale: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var error: Swift.Error? {
    get
  }
  public typealias EventHandler = (BambuserLiveShoppingOnetoOne.AgentEvent) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public var eventHandler: BambuserLiveShoppingOnetoOne.LiveShoppingAgentView.EventHandler?
  @_Concurrency.MainActor(unsafe) public var isLoaded: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var tapToMaximize: Swift.Bool
  @_Concurrency.MainActor(unsafe) public init(region: BambuserLiveShoppingOnetoOne.Region, organisationId: Swift.String, enableSSO: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func loadBooking(connectId: Swift.String)
  @_Concurrency.MainActor(unsafe) public func maximizeView()
  @_Concurrency.MainActor(unsafe) public func addProductToCall(product: BambuserLiveShoppingOnetoOne.Product, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func getProductsInCall(completion: @escaping (Swift.Result<[Swift.String]?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func isProductInCall(sku: Swift.String, completion: @escaping (Swift.Result<Swift.Bool?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func removeProductInCall(sku: Swift.String, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func addProductToCart(sku: Swift.String, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func updateProductInCart(sku: Swift.String, quantity: Swift.Int, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func getProductsInCart(completion: @escaping (Swift.Result<[Swift.String]?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func getCartStatus(completion: @escaping (Swift.Result<[Swift.String : Swift.Int]?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func isProductInCart(sku: Swift.String, completion: @escaping (Swift.Result<Swift.Bool?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func removeProductInCart(sku: Swift.String, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func refreshSsoToken(ssoToken: Swift.String, responseId: Swift.String)
  @_Concurrency.MainActor(unsafe) public func signOut()
  @_Concurrency.MainActor(unsafe) public func decrementProductInCart(sku: Swift.String, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  @objc deinit
}
extension BambuserLiveShoppingOnetoOne.LiveShoppingAgentView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
}
@available(iOS 15.0, *)
extension BambuserLiveShoppingOnetoOne.LiveShoppingAgentView : WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, requestMediaCapturePermissionFor origin: WebKit.WKSecurityOrigin, initiatedByFrame frame: WebKit.WKFrameInfo, type: WebKit.WKMediaCaptureType, decisionHandler: @escaping (WebKit.WKPermissionDecision) -> Swift.Void)
}
extension BambuserLiveShoppingOnetoOne.LiveShoppingAgentView : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
public struct VariationAttribute : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let option: Swift.String
  public var productOptions: [Swift.String]? {
    get
  }
  public init(id: Swift.String, option: Swift.String)
  public static func == (a: BambuserLiveShoppingOnetoOne.VariationAttribute, b: BambuserLiveShoppingOnetoOne.VariationAttribute) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension BambuserLiveShoppingOnetoOne.VariationAttribute {
  public init(attribute: BambuserLiveShoppingOnetoOne.AttributeDefinition, option: BambuserLiveShoppingOnetoOne.AttributeDefinitionOption)
}
public enum ProductSpecError : Swift.Error {
  case undefinedAttributeDefinition(debugDescription: Swift.String)
  case undefinedOption(debugDescription: Swift.String)
  case multipleDefinedAttributeDefinition(debugDescription: Swift.String)
  case multipleDefinedOption(debugDescription: Swift.String)
  case typeError(debugDescription: Swift.String)
}
public struct Price : Swift.Codable, Swift.Equatable {
  public let currency: Swift.String
  public let current: Swift.Float
  public var original: Swift.Float?
  public init(currency: Swift.String, current: Swift.Float, original: Swift.Float? = nil)
  public static func == (a: BambuserLiveShoppingOnetoOne.Price, b: BambuserLiveShoppingOnetoOne.Price) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ProductCartStatus : Swift.Equatable {
  public let sku: Swift.String
  public let quantity: Swift.Int
  public static func == (a: BambuserLiveShoppingOnetoOne.ProductCartStatus, b: BambuserLiveShoppingOnetoOne.ProductCartStatus) -> Swift.Bool
}
extension BambuserLiveShoppingOnetoOne.ProductCartStatus : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct BringAgentToFrontModifier : SwiftUI.ViewModifier {
  public init()
  @_Concurrency.MainActor(unsafe) public func body(content: BambuserLiveShoppingOnetoOne.BringAgentToFrontModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s28BambuserLiveShoppingOnetoOne25BringAgentToFrontModifierV4body7contentQr7SwiftUI05_ViewJ8_ContentVyACG_tF", 0) __
}
extension SwiftUI.View {
  public func bringAgentToFront() -> some SwiftUI.View
  
}
public enum Detail {
  case bullets(bullets: [Swift.String])
  case paragraph(paragraph: Swift.String)
  case unknown
}
extension BambuserLiveShoppingOnetoOne.Detail : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension BambuserLiveShoppingOnetoOne.Detail : Swift.Equatable {
  public static func == (lhs: BambuserLiveShoppingOnetoOne.Detail, rhs: BambuserLiveShoppingOnetoOne.Detail) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class LiveShoppingAgentContext : Combine.ObservableObject {
  public static let shared: BambuserLiveShoppingOnetoOne.LiveShoppingAgentContext
  @Combine.Published @_projectedValueProperty($isMinimized) public var isMinimized: Swift.Bool {
    get
  }
  public var $isMinimized: Combine.Published<Swift.Bool>.Publisher {
    get
  }
  public var agent: BambuserLiveShoppingOnetoOne.LiveShoppingAgent? {
    get
  }
  public var agentView: BambuserLiveShoppingOnetoOne.LiveShoppingAgentView? {
    get
  }
  public func maximizeAgent()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension BambuserLiveShoppingOnetoOne.LiveShoppingAgentContext {
  public func addProductToCall(product: BambuserLiveShoppingOnetoOne.Product, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  public func getProductsInCall(completion: @escaping (Swift.Result<[Swift.String]?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  public func isProductInCall(sku: Swift.String, completion: @escaping (Swift.Result<Swift.Bool?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  public func removeProductInCall(sku: Swift.String, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  public func addProductToCart(sku: Swift.String, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  public func updateProductInCart(sku: Swift.String, quantity: Swift.Int, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  public func getProductsInCart(completion: @escaping (Swift.Result<[Swift.String]?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  public func getCartStatus(completion: @escaping (Swift.Result<[Swift.String : Swift.Int]?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  public func isProductInCart(sku: Swift.String, completion: @escaping (Swift.Result<Swift.Bool?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  public func removeProductInCart(sku: Swift.String, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  public func decrementProductInCart(sku: Swift.String, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
}
public struct MinimizedStateRestoreModifier : SwiftUI.ViewModifier {
  public init(restoreAction: @escaping BambuserLiveShoppingOnetoOne.MinimizedStateRestoreModifier.RestoreAction)
  public typealias RestoreAction = (BambuserLiveShoppingOnetoOne.LiveShoppingAgent) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public func body(content: BambuserLiveShoppingOnetoOne.MinimizedStateRestoreModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s28BambuserLiveShoppingOnetoOne29MinimizedStateRestoreModifierV4body7contentQr7SwiftUI05_ViewI8_ContentVyACG_tF", 0) __
}
public struct MinimizedStateResetRestoreModifier : SwiftUI.ViewModifier {
  public init()
  @_Concurrency.MainActor(unsafe) public func body(content: BambuserLiveShoppingOnetoOne.MinimizedStateResetRestoreModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s28BambuserLiveShoppingOnetoOne34MinimizedStateResetRestoreModifierV4body7contentQr7SwiftUI05_ViewJ8_ContentVyACG_tF", 0) __
}
extension SwiftUI.View {
  public func restoreAgentAction(action: @escaping BambuserLiveShoppingOnetoOne.MinimizedStateRestoreModifier.RestoreAction) -> some SwiftUI.View
  
  public func resetAgentRestoreAction() -> some SwiftUI.View
  
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public var sceneKeyWindow: UIKit.UIWindow? {
    get
  }
}
public enum AgentError : Swift.Error, Swift.Equatable {
  case agentToolError(description: Swift.String)
  case encodingError(description: Swift.String)
  case noActiveCall
  case requestTimeout
  case skuNotFound
  public static func == (a: BambuserLiveShoppingOnetoOne.AgentError, b: BambuserLiveShoppingOnetoOne.AgentError) -> Swift.Bool
}
public struct AttributeDefinitionOption : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let name: Swift.String?
  public init(id: Swift.String, name: Swift.String? = nil)
  public static func == (a: BambuserLiveShoppingOnetoOne.AttributeDefinitionOption, b: BambuserLiveShoppingOnetoOne.AttributeDefinitionOption) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class VariationFactory {
  public var comparableAttributes: [BambuserLiveShoppingOnetoOne.ComparableVariationAttribute]?
  public var details: [BambuserLiveShoppingOnetoOne.Detail]?
  public var imageUrls: [Swift.String]?
  public var inStock: Swift.Bool
  public var name: Swift.String?
  public var price: BambuserLiveShoppingOnetoOne.Price?
  public var rating: BambuserLiveShoppingOnetoOne.Rating?
  public var subtitle: Swift.String?
  public var url: Swift.String?
  public init(comparableAttributes: [BambuserLiveShoppingOnetoOne.ComparableVariationAttribute]? = nil, details: [BambuserLiveShoppingOnetoOne.Detail]? = nil, imageUrls: [Swift.String]? = nil, inStock: Swift.Bool = true, name: Swift.String? = nil, price: BambuserLiveShoppingOnetoOne.Price? = nil, rating: BambuserLiveShoppingOnetoOne.Rating? = nil, subtitle: Swift.String? = nil, url: Swift.String? = nil)
  public func createVariation(sku: Swift.String, attributes: [BambuserLiveShoppingOnetoOne.VariationAttribute], comparableAttributes: [BambuserLiveShoppingOnetoOne.ComparableVariationAttribute]? = nil, details: [BambuserLiveShoppingOnetoOne.Detail]? = nil, imageUrls: [Swift.String]? = nil, inStock: Swift.Bool? = nil, name: Swift.String? = nil, price: BambuserLiveShoppingOnetoOne.Price? = nil, rating: BambuserLiveShoppingOnetoOne.Rating? = nil, subtitle: Swift.String? = nil, url: Swift.String? = nil) throws -> BambuserLiveShoppingOnetoOne.Variation
  @objc deinit
}
public enum AgentEvent : Swift.Codable, Swift.Equatable {
  case unknown
  case callStatusUpdate(status: BambuserLiveShoppingOnetoOne.CallSessionStatus)
  case clientLocale(locale: Swift.String)
  case error
  case didLoad
  case willMinimize
  case didMinimize
  case willMaximize
  case didMaximize
  case previewStarted
  case productUpdateInCart(data: BambuserLiveShoppingOnetoOne.ProductCartStatus)
  case productRemovedFromCall(sku: Swift.String)
  case productRemovedFromCart(sku: Swift.String)
  case refreshSsoToken(responseId: Swift.String)
  case unauthorized
  public static func == (a: BambuserLiveShoppingOnetoOne.AgentEvent, b: BambuserLiveShoppingOnetoOne.AgentEvent) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LiveShoppingAgent : SwiftUI.View {
  public init(region: BambuserLiveShoppingOnetoOne.Region, organisationId: Swift.String, connectId: Swift.String, enableSSO: Swift.Bool = false)
  public init(agentView: BambuserLiveShoppingOnetoOne.LiveShoppingAgentView)
  public let region: BambuserLiveShoppingOnetoOne.Region
  public let organisationId: Swift.String
  public let connectId: Swift.String
  public let enableSSO: Swift.Bool
  public var minimizedOrigin: BambuserLiveShoppingOnetoOne.MinimizedOrigin {
    get
    set
  }
  public var minimizedSize: CoreGraphics.CGSize? {
    get
    set
  }
  public var minimizedSuperview: UIKit.UIView? {
    get
    set
  }
  public var tapToMaximize: Swift.Bool {
    get
    set
  }
  public var eventHandler: BambuserLiveShoppingOnetoOne.LiveShoppingAgentView.EventHandler? {
    get
    set
  }
  public let context: BambuserLiveShoppingOnetoOne.LiveShoppingAgentContext
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s28BambuserLiveShoppingOnetoOne0bC5AgentV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers final public class MinimizedState {
  public static let shared: BambuserLiveShoppingOnetoOne.MinimizedState
  final public var agentView: BambuserLiveShoppingOnetoOne.LiveShoppingAgentView? {
    get
  }
  public typealias RestoreAction = (BambuserLiveShoppingOnetoOne.LiveShoppingAgentView) -> Swift.Void
  final public func registerRestoreAction(_ action: @escaping BambuserLiveShoppingOnetoOne.MinimizedState.RestoreAction)
  final public var isMinimized: Swift.Bool {
    get
  }
  final public func resetRestoreAction()
  final public func bringToFront()
  final public func moveTo(view: UIKit.UIView)
  final public func maximize()
  final public func remove()
  @objc deinit
}
extension BambuserLiveShoppingOnetoOne.MinimizedState {
  final public func addProductToCall(product: BambuserLiveShoppingOnetoOne.Product, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  final public func getProductsInCall(completion: @escaping (Swift.Result<[Swift.String]?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  final public func isProductInCall(sku: Swift.String, completion: @escaping (Swift.Result<Swift.Bool?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  final public func removeProductInCall(sku: Swift.String, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  final public func addProductToCart(sku: Swift.String, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  final public func updateProductInCart(sku: Swift.String, quantity: Swift.Int, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  final public func getProductsInCart(completion: @escaping (Swift.Result<[Swift.String]?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  final public func getCartStatus(completion: @escaping (Swift.Result<[Swift.String : Swift.Int]?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  final public func isProductInCart(sku: Swift.String, completion: @escaping (Swift.Result<Swift.Bool?, BambuserLiveShoppingOnetoOne.AgentError>) -> Swift.Void)
  final public func removeProductInCart(sku: Swift.String, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
  final public func decrementProductInCart(sku: Swift.String, completion: @escaping (BambuserLiveShoppingOnetoOne.AgentError?) -> Swift.Void)
}
public enum MinimizedOrigin {
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  case custom(_: CoreGraphics.CGPoint)
}
public struct Product : Swift.Equatable {
  public let currency: Swift.String
  public let locale: Swift.String
  public var attributes: [BambuserLiveShoppingOnetoOne.AttributeDefinition] {
    get
  }
  public var brandName: Swift.String?
  public let description: Swift.String
  public var defaultVariationIndex: Swift.Int
  public var name: Swift.String?
  public var sku: Swift.String?
  public var url: Swift.String?
  public var variations: [BambuserLiveShoppingOnetoOne.Variation] {
    get
  }
  public init(attributes: [BambuserLiveShoppingOnetoOne.AttributeDefinition] = [], brandName: Swift.String? = nil, currency: Swift.String, description: Swift.String, defaultVariationIndex: Swift.Int = 0, locale: Swift.String, name: Swift.String? = nil, sku: Swift.String? = nil, url: Swift.String? = nil, variations: [BambuserLiveShoppingOnetoOne.Variation] = []) throws
  public mutating func setVariations(variations: [BambuserLiveShoppingOnetoOne.Variation]) throws
  public static func == (a: BambuserLiveShoppingOnetoOne.Product, b: BambuserLiveShoppingOnetoOne.Product) -> Swift.Bool
}
extension BambuserLiveShoppingOnetoOne.Product : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AgentEventHandlerModifier : SwiftUI.ViewModifier {
  public init(eventHandler: @escaping BambuserLiveShoppingOnetoOne.LiveShoppingAgentView.EventHandler)
  @_Concurrency.MainActor(unsafe) public func body(content: BambuserLiveShoppingOnetoOne.AgentEventHandlerModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s28BambuserLiveShoppingOnetoOne25AgentEventHandlerModifierV4body7contentQr7SwiftUI05_ViewI8_ContentVyACG_tF", 0) __
}
extension SwiftUI.View {
  public func onAgentEvent(eventHandler: @escaping BambuserLiveShoppingOnetoOne.LiveShoppingAgentView.EventHandler) -> some SwiftUI.View
  
}
public struct ComparableVariationAttribute : Swift.Codable, Swift.Equatable {
  public let id: Swift.String
  public let name: Swift.String?
  public let option: Swift.String
  public init(id: Swift.String, name: Swift.String? = nil, option: Swift.String)
  public static func == (a: BambuserLiveShoppingOnetoOne.ComparableVariationAttribute, b: BambuserLiveShoppingOnetoOne.ComparableVariationAttribute) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Variation : Swift.Equatable {
  public var attributes: [BambuserLiveShoppingOnetoOne.VariationAttribute] {
    get
  }
  public var comparableAttributes: [BambuserLiveShoppingOnetoOne.ComparableVariationAttribute]?
  public var details: [BambuserLiveShoppingOnetoOne.Detail]?
  public let imageUrls: [Swift.String]
  public let inStock: Swift.Bool
  public let name: Swift.String
  public let price: BambuserLiveShoppingOnetoOne.Price
  public var rating: BambuserLiveShoppingOnetoOne.Rating?
  public let sku: Swift.String
  public var subtitle: Swift.String?
  public let url: Swift.String?
  public init(attributes: [BambuserLiveShoppingOnetoOne.VariationAttribute] = [], comparableAttributes: [BambuserLiveShoppingOnetoOne.ComparableVariationAttribute]? = [], details: [BambuserLiveShoppingOnetoOne.Detail]? = nil, imageUrls: [Swift.String], inStock: Swift.Bool = true, name: Swift.String, price: BambuserLiveShoppingOnetoOne.Price, rating: BambuserLiveShoppingOnetoOne.Rating? = nil, sku: Swift.String, subtitle: Swift.String? = nil, url: Swift.String? = nil)
  public static func == (a: BambuserLiveShoppingOnetoOne.Variation, b: BambuserLiveShoppingOnetoOne.Variation) -> Swift.Bool
}
extension BambuserLiveShoppingOnetoOne.Variation : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum Region : Swift.Equatable {
  case eu
  case global
  case custom(url: Swift.String)
  public static func == (a: BambuserLiveShoppingOnetoOne.Region, b: BambuserLiveShoppingOnetoOne.Region) -> Swift.Bool
}
extension BambuserLiveShoppingOnetoOne.CallSessionStatus : Swift.Hashable {}
extension BambuserLiveShoppingOnetoOne.CallSessionStatus : Swift.RawRepresentable {}
